# Codeded By @Tamilan_BotsZ
import asyncio
import re
import ast
import random
import math
from pyrogram.errors.exceptions.bad_request_400 import MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty
from Script import script
import pyrogram
from tamilanbotsz import short_url
from database.connections_mdb import active_connection, all_connections, delete_connection, if_active, make_active, \
    make_inactive
from info import ADMINS, AUTH_CHANNEL, AUTH_USERS, CUSTOM_FILE_CAPTION, AUTH_GROUPS, P_TTI_SHOW_OFF, IMDB, FILE_REQ_CHANNEL, HOW_TO_DOWNLOAD, PICS, \
    SINGLE_BUTTON, SPELL_CHECK_REPLY, IMDB_TEMPLATE
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto
from pyrogram import Client, filters, enums
from pyrogram.errors import FloodWait, UserIsBlocked, MessageNotModified, PeerIdInvalid
from utils import get_shortlink, get_size, is_subscribed, get_poster, search_gagala, temp, get_settings, save_group_settings
from database.users_chats_db import db
from database.ia_filterdb import Media, get_file_details, get_search_results
from database.filters_mdb import (
    del_all,
    find_filter,
    get_filters,
)
file_req_channel = FILE_REQ_CHANNEL

import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)

BUTTONS = {}
SPELL_CHECK = {}
FILTER_MODE = {}
MAL_REP = "<b>‡¥π‡¥≤‡µã {} ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥à ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ ‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥æ‡µª ‡¥ï‡¥¥‡¥ø‡¥û‡µç‡¥û‡¥ø‡¥≤‡µç‡¥≤ ü•¥ ...\n\nGoogle, Yandex ‡¥è‡¥§‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡¥≤‡µÅ‡¥Ç ‡¥í‡¥∞‡µÅ ‡¥¨‡¥ü‡µç‡¥ü‡¥£‡¥ø‡µΩ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µç ‡¥∂‡¥∞‡¥ø‡¥Ø‡¥æ‡¥Ø ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥™‡µá‡¥∞‡µç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥ø ‡¥á‡¥µ‡¥ø‡¥ü‡µÜ ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï ‡¥é‡¥®‡µç‡¥®‡¥æ‡¥≤‡µá ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ / ‡¥∏‡µÄ‡¥∞‡¥ø‡¥Ø‡¥∏‡µç ‡¥ï‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥ï‡¥Ø‡µÅ‡¥≥‡µç‡¥≥‡µÅ üôÇ...\n\n‡¥∂‡¥∞‡¥ø‡¥Ø‡¥æ‡¥Ø ‡¥™‡µá‡¥∞‡µç ‡¥®‡µΩ‡¥ï‡¥ø‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥Ç ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥ø‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ...</b> <code>@admin query</code> <b>‡¥à ‡¥´‡µã‡µº‡¥Æ‡¥æ‡¥±‡µç‡¥±‡¥ø‡µΩ ‡¥Ö‡¥°‡µç‡¥Æ‡¥ø‡¥®‡µÜ ‡¥Ö‡¥±‡¥ø‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï .. ‡¥û‡¥ô‡µç‡¥ô‡µæ 24 ‡¥Æ‡¥£‡¥ø‡¥ï‡µç‡¥ï‡µÇ‡¥±‡¥ø‡¥®‡µÅ‡¥≥‡µç‡¥≥‡¥ø‡µΩ ‡¥Ö‡¥™‡µç‚Äå‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥Ç üòá</b> "
ENG_REP = "<b>Hello {} I could not find the movie you asked for ü•¥</b>\n\n<b>Google, Yandex Click on any button and find the <u>CORRECT MOVIE NAME </u>and enter it here but the movie will be available üôÉ\n\nIf you do not receive the movie even after entering the correct name ...</b> <code>@admin type movie name</code> <b>Inform the admin in this format .. We will upload within 24 hours üòá</b>"

@Client.on_message(filters.command('autofilter'))
async def fil_mod(client, message): 
      mode_on = ["yes", "on", "true"]
      mode_of = ["no", "off", "false"]

      try: 
         args = message.text.split(None, 1)[1].lower() 
      except: 
         return await message.reply("**I…¥·¥Ñ·¥è·¥ç·¥© ü·¥á·¥õ·¥á C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö...**")
      
      m = await message.reply("**S·¥á·¥õ·¥õ…™…¥…¢s.../**")

      if args in mode_on:
          FILTER_MODE[str(message.chat.id)] = "True" 
          await m.edit("**A·¥ú·¥õ·¥è-F…™ ü·¥õ·¥á Ä E…¥·¥Ä ô ü·¥á·¥Ö**")
      
      elif args in mode_of:
          FILTER_MODE[str(message.chat.id)] = "False"
          await m.edit("**A·¥ú·¥õ·¥è-F…™ ü·¥õ·¥á Ä D…™s·¥Ä ô ü·¥á·¥Ö**")
      else:
          await m.edit("Us·¥á :- /autofilter on O Ä /autofilter off")

@Client.on_message((filters.group | filters.private) & filters.text & filters.incoming)
async def give_filter(client, message):
    k = await manual_filters(client, message)
    if k == False:
        await auto_filter(client, message)


@Client.on_callback_query(filters.regex(r"^next"))
async def next_page(bot, query):
    ident, req, key, offset = query.data.split("_")
    if int(req) not in [query.from_user.id, 0]:
        return await query.answer(f"‡¥Æ‡µã‡¥®‡µÜ {query.from_user.first_name} ‡¥á‡¥§‡µç ‡¥®‡¥ø‡¥®‡¥ï‡µç‡¥ï‡µÅ‡¥≤‡¥§‡¥≤‡µç‡¥≤ ü§≠\n\n{query.message.reply_to_message.from_user.first_name} ‡¥®‡µç‡¥±‡µÜ ‡¥±‡¥ø‡¥ï‡µç‡¥µ‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥Ü‡¥£‡µç ‡¥á‡¥§‡µç üôÇ\n\n Ä·¥á«´·¥ú·¥ás·¥õ  è·¥è·¥ú Ä ·¥è·¥°…¥ üòò\n\n¬© ·¥ç·¥è·¥†…™·¥á ú·¥ú ô", show_alert=True)
    try:
        offset = int(offset)
    except:
        offset = 0
    search = BUTTONS.get(key)
    if not search:
        await query.answer("‡¥Ö‡¥≤‡µç‡¥≤‡¥Ø‡µã ‡¥Æ‡¥π‡¥æ‡µª ‡¥§‡¥æ‡¥ô‡µç‡¥ï‡µæ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡¥§‡µç ‡¥™‡¥¥‡¥Ø ‡¥Æ‡µÜ‡¥∏‡µç‡¥∏‡µá‡¥ú‡µç ‡¥Ü‡¥£‡µç ‡¥µ‡µá‡¥£‡¥Æ‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥í‡¥®‡µç‡¥®‡µÅ‡¥Ç ‡¥ï‡µÇ‡¥ü‡µÜ ‡¥±‡¥ø‡¥ï‡µç‡¥µ‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç üòâ\n\nYou are using this for one of my old message, please send the request again",show_alert=True)
        return

    files, n_offset, total = await get_search_results(search, offset=offset, filter=True)
    try:
        n_offset = int(n_offset)
    except:
        n_offset = 0

    if not files:
        return
    settings = await get_settings(query.message.chat.id)
    if settings['button']:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"‚ñ´ {get_size(file.file_size)} ‚ñ∏ {file.file_name}", callback_data=f'files#{file.file_id}'
                ),
            ]
            for file in files
        ]
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}", callback_data=f'files#{file.file_id}'
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'files_#{file.file_id}',
                ),
            ]
            for file in files
        ]
    
    if 0 < offset <= 6:
        off_set = 0
    elif offset == 0:
        off_set = None
    else:
        off_set = offset - 6
    if n_offset == 0:
        btn.append(
            [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"),
             InlineKeyboardButton(f"{round(int(offset)/10)+1} - {round(total/10)}", callback_data="pages"),
             InlineKeyboardButton("·¥Ö·¥á ü·¥á·¥õ·¥á", callback_data="close_pages")]
        )
    elif off_set is None:
        btn.append([InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"),
                    InlineKeyboardButton(f"{round(int(offset)/10)+1} - {round(total/10)}", callback_data="pages"),
                    InlineKeyboardButton("…¥·¥áx·¥õ", callback_data=f"next_{req}_{key}_{n_offset}")])
    else:
        btn.append(
            [
                InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"),
                InlineKeyboardButton(f"{round(int(offset)/10)+1} - {round(total/10)}", callback_data="pages"),
                InlineKeyboardButton("…¥·¥áx·¥õ", callback_data=f"next_{req}_{key}_{n_offset}")
            ],
        )
    btn.insert(0, 
        [
            InlineKeyboardButton(f'…™…¥Íú∞·¥è', 'movieinfo'),
            InlineKeyboardButton(f'·¥ç·¥è·¥†…™·¥á', 'movss'),
            InlineKeyboardButton(f'Íú±·¥á Ä…™·¥áÍú±', 'moviis')
        ]
    )
    try:
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(btn)
        )
    except MessageNotModified:
        pass
    await query.answer()


@Client.on_callback_query(filters.regex(r"^spolling"))
async def advantage_spoll_choker(bot, query):
    _, user, movie_ = query.data.split('#')
    if int(user) != 0 and query.from_user.id != int(user):
        return await query.answer("s·¥á·¥Ä Ä·¥Ñ ú  è·¥è·¥ú Äs·¥á ü“ì", show_alert=True)
    if movie_ == "close_spellcheck":
        return await query.message.delete()
    movies = SPELL_CHECK.get(query.message.reply_to_message.id)
    if not movies:
        return await query.answer("You are clicking on an old button which is expired.", show_alert=True)
    movie = movies[(int(movie_))]
    await query.answer('I·¥Ä·¥ç C ú·¥á·¥Ñ·¥ã…™…¥…¢ U As·¥ã·¥á·¥Ö F…™ ü·¥á I…¥ M è D ô...')
    k = await manual_filters(bot, query.message, text=movie)
    if k == False:
        files, offset, total_results = await get_search_results(movie, offset=0, filter=True)
        if files:
            k = (movie, files, offset, total_results)
            await auto_filter(bot, query, k)
        else:
             k = await query.message.edit('S·¥è Ä Ä è P ü·¥á·¥Äs·¥á C ú·¥á·¥Ñ·¥ã Y·¥è·¥ú Ä S·¥©·¥á ü ü…™…¥…¢ I…¥ G·¥è·¥è…¢ ü·¥á F…™ Äs·¥õ Ôπ¶ I“ì Y·¥è·¥ú Ä S·¥©·¥á ü ü…™…¥…¢ C·¥è Ä Ä·¥á·¥Ñ·¥õ M·¥á·¥Ä…¥s T ú·¥Ä·¥õ F…™ ü·¥á N·¥è·¥õ F·¥è·¥ú ô·¥Ö I…¥ M è D·¥Ä·¥õ·¥Ä ô·¥Äs·¥á üíå')
             await asyncio.sleep(30)
             await k.delete()



@Client.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    if query.data == "close_data":
        await query.message.delete()
    elif query.data == "delallconfirm":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == enums.ChatType.PRIVATE:
            grpid = await active_connection(str(userid))
            if grpid is not None:
                grp_id = grpid
                try:
                    chat = await client.get_chat(grpid)
                    title = chat.title
                except:
                    await query.message.edit_text("T ú·¥á Ä·¥á ·¥Ä Ä·¥á …¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥Íú±!! C·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥õ·¥è Íú±·¥è·¥ç·¥á …¢ Ä·¥è·¥ú·¥òÍú± “ì…™ ÄÍú±·¥õ.", quote=True)
                    return await query.answer('M·¥è·¥†…™·¥á ú·¥ú ô')
            else:
                await query.message.edit_text(
                    "I·¥Ä·¥ç N·¥è·¥õ C·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö T·¥è A…¥ è G Ä·¥è·¥ú·¥© \nC ú·¥á·¥Ñ·¥ã /connections O Ä C·¥è…¥…¥·¥á·¥Ñ·¥õ T·¥è A…¥ è G Ä·¥è·¥ú·¥©",
                    quote=True
                )
                return await query.answer('M·¥è·¥†…™·¥á ú·¥ú ô')

        elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            grp_id = query.message.chat.id
            title = query.message.chat.title

        else:
            return await query.answer('M·¥è·¥†…™·¥á ú·¥ú ô')

        st = await client.get_chat_member(grp_id, userid)
        if (st.status == enums.ChatMemberStatus.OWNER) or (str(userid) in ADMINS):
            await del_all(query.message, grp_id, title)
        else:
            await query.answer("You need to be Group Owner or an Auth User to do that!", show_alert=True)
    elif query.data == "delallcancel":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == enums.ChatType.PRIVATE:
            await query.message.reply_to_message.delete()
            await query.message.delete()

        elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            grp_id = query.message.chat.id
            st = await client.get_chat_member(grp_id, userid)
            if (st.status == enums.ChatMemberStatus.OWNER) or (str(userid) in ADMINS):
                await query.message.delete()
                try:
                    await query.message.reply_to_message.delete()
                except:
                    pass
            else:
                await query.answer("T ú·¥Ä·¥õ¬¥s N·¥è·¥õ F·¥è Ä Y·¥è·¥ú !!", show_alert=True)
    elif "groupcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        act = query.data.split(":")[2]
        hr = await client.get_chat(int(group_id))
        title = hr.title
        user_id = query.from_user.id

        if act == "":
            stat = "CONNECT"
            cb = "connectcb"
        else:
            stat = "DISCONNECT"
            cb = "disconnect"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{stat}", callback_data=f"{cb}:{group_id}"),
             InlineKeyboardButton("üö´ D·¥á ü·¥á·¥õ·¥á üö´", callback_data=f"deletecb:{group_id}")],
            [InlineKeyboardButton("‚Äπ‚Äπ‚Äπ B·¥Ä·¥Ñ·¥ã", callback_data="backcb")]
        ])

        await query.message.edit_text(
            f"Group Name : **{title}**\nGroup ID : `{group_id}`",
            reply_markup=keyboard,
            parse_mode=enums.ParseMode.MARKDOWN
        )
        return await query.answer('M·¥è·¥†…™·¥á ú·¥ú ô')
    elif "connectcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        hr = await client.get_chat(int(group_id))

        title = hr.title

        user_id = query.from_user.id

        mkact = await make_active(str(user_id), str(group_id))

        if mkact:
            await query.message.edit_text(
                f"Connected to **{title}**",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        else:
            await query.message.edit_text('Some error occurred!!', parse_mode=enums.ParseMode.MARKDOWN)
        return await query.answer('C…™…¥…™·¥ç·¥Ä ü·¥è·¥ã ú·¥Ä·¥ç')
    elif "disconnect" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        hr = await client.get_chat(int(group_id))

        title = hr.title
        user_id = query.from_user.id

        mkinact = await make_inactive(str(user_id))

        if mkinact:
            await query.message.edit_text(
                f"D…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö F Ä·¥è·¥ç **{title}**",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        else:
            await query.message.edit_text(
                f"S·¥è·¥ç·¥á E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö!!",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        return await query.answer('M·¥è·¥†…™·¥á ú·¥ú ô')
    elif "deletecb" in query.data:
        await query.answer()

        user_id = query.from_user.id
        group_id = query.data.split(":")[1]

        delcon = await delete_connection(str(user_id), str(group_id))

        if delcon:
            await query.message.edit_text(
                "S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ D·¥á ü·¥á·¥õ·¥á·¥Ö"
            )
        else:
            await query.message.edit_text(
                f"S·¥è·¥ç·¥á E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö!!",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        return await query.answer('M·¥è·¥†…™·¥á ú·¥ú ô')
    elif query.data == "backcb":
        await query.answer()

        userid = query.from_user.id

        groupids = await all_connections(str(userid))
        if groupids is None:
            await query.message.edit_text(
                "There are no active connections!! Connect to some groups first.",
            )
            return await query.answer('M·¥è·¥†…™·¥á ú·¥ú ô')
        buttons = []
        for groupid in groupids:
            try:
                ttl = await client.get_chat(int(groupid))
                title = ttl.title
                active = await if_active(str(userid), str(groupid))
                act = " - ACTIVE" if active else ""
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text=f"{title}{act}", callback_data=f"groupcb:{groupid}:{act}"
                        )
                    ]
                )
            except:
                pass
        if buttons:
            await query.message.edit_text(
                "Your connected group details ;\n\n",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
    elif "alertmessage" in query.data:
        grp_id = query.message.chat.id
        i = query.data.split(":")[1]
        keyword = query.data.split(":")[2]
        reply_text, btn, alerts, fileid = await find_filter(grp_id, keyword)
        if alerts is not None:
            alerts = ast.literal_eval(alerts)
            alert = alerts[int(i)]
            alert = alert.replace("\\n", "\n").replace("\\t", "\t")
            await query.answer(alert, show_alert=True)
    if query.data.startswith("file"):
        ident, file_id = query.data.split("#")
        files_ = await get_file_details(file_id)
        if not files_:
            return await query.answer('No such file exist.')
        files = files_[0]
        title = files.file_name
        size = get_size(files.file_size)
        f_caption = files.caption
        settings = await get_settings(query.message.chat.id)
        if CUSTOM_FILE_CAPTION:
            try:
                f_caption = CUSTOM_FILE_CAPTION.format(file_name='' if title is None else title,
                                                       file_size='' if size is None else size,
                                                       file_caption='' if f_caption is None else f_caption)
            except Exception as e:
                logger.exception(e)
            f_caption = f_caption
        if f_caption is None:
            f_caption = f"{files.file_name}"

        try:
            if AUTH_CHANNEL and not await is_subscribed(client, query):
                await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
                return
            elif settings['botpm']:
                await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
                return
            else:
                g = short_url(f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
                await client.send_photo(chat_id=query.from_user.id, photo='https://graph.org/file/f7f173057c2b76940c79c.jpg', caption = f"<b>üìïN·¥Ä·¥ç·¥á ‚û† : <code>{files.file_name}</code> \n\nüîóS…™·¥¢·¥á ‚û† : {get_size(files.file_size)}</b>", 
                                          reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton('‚ÅâÔ∏è H·¥è·¥° T·¥è D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ÅâÔ∏è', url=HOW_TO_DOWNLOAD)
                ],
                [
                    InlineKeyboardButton('üìÇ D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö N·¥è·¥° üìÇ', url=g)
                ]]))
                await query.answer('C ü…™·¥Ñ·¥ã ¬∞C ú·¥á·¥Ñ·¥ã B·¥è·¥õ P·¥ç¬∞ B·¥ú·¥õ·¥õ·¥è…¥\n\nI S·¥á…¥·¥õ·¥á·¥Ö U AS·¥ã·¥á·¥Ö F…™ ü·¥ás', show_alert=True)
        except UserIsBlocked:
            await query.answer('F…™ Äs·¥õ S·¥õ·¥Ä Ä·¥õ M·¥á T ú·¥á…¥ I W…™ ü ü S·¥á…¥·¥Ö F…™ ü·¥ás !', show_alert=True)
        except PeerIdInvalid:
            await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
        except Exception as e:
            await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
    elif query.data.startswith("checksub"):
        if AUTH_CHANNEL and not await is_subscribed(client, query):
            await query.answer("F…™ Äs·¥õ J·¥è…™…¥ T ú·¥á C ú·¥Ä…¥…¥·¥á ü A…¥·¥Ö C ü…™·¥Ñ·¥ã T ú…™s üòí", show_alert=True)
            return
        ident, file_id = query.data.split("#")
        files_ = await get_file_details(file_id)
        if not files_:
            return await query.answer('N·¥è S·¥ú·¥Ñ ú F…™ ü·¥á Exs…™s·¥õ.')
        files = files_[0]
        title = files.file_name
        size = get_size(files.file_size)
        f_caption = files.caption
        if CUSTOM_FILE_CAPTION:
            try:
                f_caption = CUSTOM_FILE_CAPTION.format(file_name='' if title is None else title,
                                                       file_size='' if size is None else size,
                                                       file_caption='' if f_caption is None else f_caption)
            except Exception as e:
                logger.exception(e)
                f_caption = f_caption
        if f_caption is None:
            f_caption = f"{title}"
        await query.answer()
        await client.send_cached_media(
            chat_id=query.from_user.id,
            file_id=file_id,
            caption=f_caption,
            protect_content=True if ident == 'checksubp' else False
        )
    elif query.data == "pages":
        await query.answer()

    elif query.data == "start":
        buttons = [[
            InlineKeyboardButton('‚ö° ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á Íú∞·¥è Ä ·¥ç·¥è Ä·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s ‚ö°', callback_data='help')
            ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.START_TXT.format(query.from_user.mention, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
       )
    elif query.data == "help":
        buttons = [[
            InlineKeyboardButton("üë• ùóöùó•ùó¢ùó®ùó£ - ùü≠", url=f"https://t.me/ARAKAL_THERAVAD_MOVIES"),
            InlineKeyboardButton("üë•ùóöùó•ùó¢ùó®ùó£ - ùüÆ", url=f"https://t.me/ARAKAL_THERAVAD_GROUP_02")
            ],[
            InlineKeyboardButton("üë• ùóöùó•ùó¢ùó®ùó£ - ùüØ", url=f"https://t.me/ARAKAL_THERAVAD_GROUP_03"),
            InlineKeyboardButton("üë•ùóöùó•ùó¢ùó®ùó£ - ùü∞", url=f"https://t.me/ARAKAL_THERAVAD_GROUP_04")
            ],[
            InlineKeyboardButton("üñ• ùó°ùóòùó™ ùó¢ùóßùóß ùó®ùó£ùóóùóîùóßùóòùó¶ üñ•", url="https://t.me/OTT_ARAKAL_THERAVAD_MOVIESS")
            ],[
            InlineKeyboardButton("‚≠ïÔ∏èùóöùóòùóß ùó¢ùó®ùó• ùóñùóõùóîùó°ùó°ùóòùóü ùóüùóúùó°ùóûùó¶ ‚≠ïÔ∏è", url="https://t.me/ARAKAL_THERAVAD_GROUP_LINKS")
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=script.START_TXT.format(query.from_user.mention, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
       )
    elif query.data == "onwer":
        buttons = [[
            InlineKeyboardButton('üõ∞Ô∏è  Ä·¥á…¥·¥Ö·¥á Ä…™…¥…¢ Íú±·¥õ·¥Ä·¥õ·¥úÍú± ‚òÅÔ∏è',callback_data='rendr')
            ],[
            InlineKeyboardButton('·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ', callback_data='ajtgpm'),
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto("https://graph.org/file/511b91c9fc41f20ded678.jpg")
        )
        await query.message.edit_text(
            text=script.OWNER_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "about":
        buttons = [[
            InlineKeyboardButton('·¥Ä ô·¥è·¥ú·¥õ', callback_data='gtheroabout'),
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='help')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto("https://graph.org/file/d24459bb2db7d99ccdf72.jpg")
        )
        await query.message.edit_text(
            text=script.ABOUT_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "gtheroabout":
        await query.answer("‚õ•Œ∑Œ±–º—î : …¢·¥õ ·†∞  ú·¥á Ä·¥è\n\n‚õ•œÅ‚ÑìŒ±¬¢—î : ·¥ò·¥Ä ü·¥Ä | ·¥ã·¥è·¥õ·¥õ·¥Ä è·¥Ä·¥ç\n\n‚õ• ·¥Ä  úÍú±Íú± Íú±·¥õ·¥ú·¥Ö·¥á…¥·¥õ\n\n‚õ•—ï–∫Œπ‚Ñì‚Ñì—ï : ·¥Ñ·¥è·¥Ö·¥á ·¥á·¥Ö…™·¥õ…™…¥…¢\n\n‚õ•–º è –≤œÉ—Ç—ï : @…¢·¥õ·¥Ö·¥ú ü“©·¥ú·¥Ä Ä ô·¥è·¥õ\n\n‚õ•¬¢Œ±—Ç¬¢–Ω –º—î ŒΩŒπŒ± : @…¢·¥õ ú·¥á Ä·¥è·¥õ…¢x", show_alert=True)
        
    elif query.data == "ajtgpm":
        await query.answer("üìµ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö\n\n- Íú±·¥á·¥Ñ·¥õ…™·¥è…¥ B206 - Íú±·¥ò·¥Ä·¥ç +  ô·¥Ä…¥ ‚ö†Ô∏è\n\n- Íú±·¥á·¥Ñ·¥õ…™·¥è…¥ Y8R6 - Íú±·¥ò·¥Ä·¥ç +  Ä·¥á·¥ò·¥è Ä·¥õ üâê\n\nüóΩ  ô è ‚óâ‚Äø‚óâ ùêÄùêâ ùêìùêÜ", show_alert=True)
        
    elif query.data == "movieinfo":
        await query.answer("‚ö† …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ‚ö†\n\n·¥ÄÍú∞·¥õ·¥á Ä 30 ·¥ç…™…¥·¥ú·¥õ·¥á·¥áÍú± ·¥õ ú…™Íú± ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥°…™ ü ü  ô·¥á ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö\n\n…™Íú∞  è·¥è·¥ú ·¥Ö·¥è …¥·¥è·¥õ Íú±·¥á·¥á ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥ç·¥è·¥†…™·¥á / s·¥á Ä…™·¥ás Íú∞…™ ü·¥á,  ü·¥è·¥è·¥ã ·¥Ä·¥õ ·¥õ ú·¥á …¥·¥áx·¥õ ·¥ò·¥Ä…¢·¥á\n\n¬© ·¥ç·¥è·¥†…™·¥á ú·¥ú ô", show_alert=True)
        
    elif query.data == "movss":
        await query.answer("‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ\n·¥ç·¥è·¥†…™·¥á  Ä·¥á«´·¥ú·¥áÍú±·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ\n‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ\n\n…¢·¥è ·¥õ·¥è …¢·¥è·¥è…¢ ü·¥á ‚û† ·¥õ è·¥ò·¥á ·¥ç·¥è·¥†…™·¥á …¥·¥Ä·¥ç·¥á ‚û† ·¥Ñ·¥è·¥ò è ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ …¥·¥Ä·¥ç·¥á ‚û† ·¥ò·¥ÄÍú±·¥õ·¥á ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò\n\n·¥áx·¥Ä·¥ç·¥ò ü·¥á : ·¥ã…¢Íú∞ ·¥Ñ ú·¥Ä·¥ò·¥õ·¥á Ä 2  2022\n\nüöØ ·¥Ö·¥è…¥·¥õ ·¥úÍú±·¥á ‚û† ':(!,./)\n\n¬©  ·¥ç·¥è·¥†…™·¥á ú·¥ú ô", show_alert=True)
        
    elif query.data == "moviis":
        await query.answer("‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ\nÍú±·¥á Ä…™·¥áÍú±  Ä·¥á«´·¥ú·¥áÍú±·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ\n‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ\n\n…¢·¥è ·¥õ·¥è …¢·¥è·¥è…¢ ü·¥á ‚û† ·¥õ è·¥ò·¥á ·¥ç·¥è·¥†…™·¥á …¥·¥Ä·¥ç·¥á ‚û† ·¥Ñ·¥è·¥ò è ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ …¥·¥Ä·¥ç·¥á ‚û† ·¥ò·¥ÄÍú±·¥õ·¥á ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò\n\n·¥áx·¥Ä·¥ç·¥ò ü·¥á :  ü·¥è·¥ã…™ S01 E01\n\nüöØ ·¥Ö·¥è…¥·¥õ ·¥úÍú±·¥á ‚û† ':(!,./)\n\n¬© ·¥ç·¥è·¥†…™·¥á ú·¥ú ô", show_alert=True)
        
    elif query.data == "neosub":
        await query.answer("‡¥Ö‡¥•‡¥µ‡¥æ ‡¥ó‡µç‡¥∞‡µÇ‡¥™‡µç‡¥™‡µç‚Äå ‡¥ï‡µã‡¥™‡µç‡¥™‡¥ø‡¥±‡µà‡¥±‡µç ‡¥ï‡¥ø‡¥ü‡µç‡¥ü‡¥ø ‡¥™‡µã‡¥Ø‡¥æ‡µΩ.. ‡¥™‡µÅ‡¥§‡¥ø‡¥Ø ‡¥ó‡µç‡¥∞‡µÇ‡¥™‡µç‡¥™‡µç‚Äå ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥á‡¥™‡µç‡¥™‡µã‡µæ ‡¥ú‡µã‡¥Ø‡¥ø‡µª ‡¥Ü‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥ö‡¥æ‡¥®‡µΩ ‡¥µ‡¥¥‡¥ø ‡¥Ü‡¥Ø‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Ç ‡¥Ö‡¥±‡¥ø‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ü§•",show_alert=True)
        
    elif query.data == "rendr":
        await query.answer("‚ö°Ô∏è ü…™·¥†·¥á s ès·¥õ·¥á·¥ç s·¥õ·¥Ä·¥õ·¥ús ‚ö°Ô∏è\n\n‚ùÇ  Ä·¥Ä·¥ç ‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óå‚óå‚óå\n‚úá ·¥Ñ·¥ò·¥ú ‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óå‚óå‚óå\n‚ú™ ·¥Ö·¥Ä·¥õ·¥Ä ·¥õ Ä·¥ÄÍú∞…™·¥Ñs ‚óè‚óè‚óè‚óè‚óå‚óå‚óå‚óå‚óå‚óå üõ∞\n\n·¥†2.7.1 [s·¥õ·¥Ä ô ü·¥á] """, show_alert=True)
        
    elif query.data == "close_data": 
        await query.message.delete()
        try:
            await query.message.reply_to_message.delete()
        except:
            pass
    elif query.data == "malspell":
        btn = [[
            InlineKeyboardButton('üîç …¢·¥è·¥è…¢ ü·¥á üîé', url=f'https://google.com/search?q='),
            InlineKeyboardButton(' üîç  è·¥Ä…¥·¥Ö·¥áx üîé', url=f'https://yandex.com/search?text=')
        ],[
            InlineKeyboardButton("üá∫üá∏ ·¥õ Ä·¥Ä…¥s ü·¥Ä·¥õ·¥á ·¥õ·¥è ·¥á…¥…¢ ü…™Íú± ú üá∫üá∏", callback_data="engspell")
        ]]
        await query.message.edit_text(script.SPELL_CHECK_MAL, reply_markup=InlineKeyboardMarkup(btn))
    elif query.data == "engspell":
        btn = [[
            InlineKeyboardButton('üîç …¢·¥è·¥è…¢ ü·¥á üîé', url=f'https://google.com/search?q='),
            InlineKeyboardButton(' üîç  è·¥Ä…¥·¥Ö·¥áx üîé', url=f'https://yandex.com/search?text=')
        ],[
            InlineKeyboardButton("üáÆüá≥ ·¥õ Ä·¥Ä…¥s ü·¥Ä·¥õ·¥á ·¥õ·¥è ·¥ç·¥Ä ü·¥Ä è·¥Ä ü·¥Ä·¥ç üáÆüá≥", callback_data="malspell")
        ]] 
    elif query.data == "stats":
        buttons = [[
            InlineKeyboardButton('‚ôªÔ∏è R·¥á“ì Ä·¥ás ú', callback_data='rfrsh')
        ], [
            InlineKeyboardButton('‚Äπ‚Äπ‚Äπ B·¥Ä·¥Ñ·¥ã', callback_data='about')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        total = await Media.count_documents()
        users = await db.total_users_count()
        chats = await db.total_chat_count()
        monsize = await db.get_db_size()
        free = 536870912 - monsize
        monsize = get_size(monsize)
        free = get_size(free)
        await query.message.edit_text(
            text=script.STATUS_TXT.format(total, users, chats, monsize, free),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "rfrsh":
        await query.answer("Fetching MongoDb DataBase")
        buttons = [[
            InlineKeyboardButton('‚ôªÔ∏è R·¥á“ì Ä·¥ás ú', callback_data='rfrsh')
        ], [
            InlineKeyboardButton('‚Äπ‚Äπ‚Äπ B·¥Ä·¥Ñ·¥ã', callback_data='about')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        total = await Media.count_documents()
        users = await db.total_users_count()
        chats = await db.total_chat_count()
        monsize = await db.get_db_size()
        free = 536870912 - monsize
        monsize = get_size(monsize)
        free = get_size(free)
        await query.message.edit_text(
            text=script.STATUS_TXT.format(total, users, chats, monsize, free),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data.startswith("setgs"):
        ident, set_type, status, grp_id = query.data.split("#")
        grpid = await active_connection(str(query.from_user.id))

        if str(grp_id) != str(grpid):
            await query.message.edit("Your Active Connection Has Been Changed. Go To /settings.")
            return await query.answer('Piracy Is Crime')

        if status == "True":
            await save_group_settings(grpid, set_type, False)
        else:
            await save_group_settings(grpid, set_type, True)

        settings = await get_settings(grpid)

        if settings is not None:
            buttons = [
                [
                    InlineKeyboardButton('F…™ ü·¥õ·¥á Ä B·¥ú·¥õ·¥õ·¥è…¥',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}'),
                ],
                [
                    InlineKeyboardButton('S…™…¥…¢ ü·¥á' if settings["button"] else 'D·¥è·¥ú ô ü·¥á',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('F·¥è Ä·¥°·¥Ä Ä·¥Ö R·¥ás·¥õ Ä…™·¥Ñ·¥õ',
                                         callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Y·¥ás' if settings["file_secure"] else '‚ùå N·¥è',
                                         callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('I·¥ç·¥Ö ô', callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Y·¥ás' if settings["imdb"] else '‚ùå N·¥è',
                                         callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('S·¥©·¥á ü ü C ú·¥á·¥Ñ·¥ã',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Y·¥ás' if settings["spell_check"] else '‚ùå N·¥è',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('W·¥á ü·¥Ñ·¥è·¥ç·¥á', callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Y·¥ás' if settings["welcome"] else '‚ùå N·¥è',
                                         callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_reply_markup(reply_markup)
    await query.answer('M·¥è·¥†…™·¥á ú·¥ú ô')


async def auto_filter(client, msg, spoll=False):
    if not spoll:
        message = msg
        settings = await get_settings(message.chat.id)
        if message.text.startswith("/"): return  # ignore commands
        if re.findall("((^\/|^,|^!|^\.|^[\U0001F600-\U000E007F]).*)", message.text):
            return
        if 2 < len(message.text) < 100:
            search = message.text
            files, offset, total_results = await get_search_results(search.lower(), offset=0, filter=True)
            if not files:
                if settings["spell_check"]:
                    return await advantage_spell_chok(msg)
                else:
                    return
        else:
            return
    else:
        settings = await get_settings(msg.message.chat.id)
        message = msg.message.reply_to_message  # msg will be callback query
        search, files, offset, total_results = spoll
    pre = 'filep' if settings['file_secure'] else 'file'
    if settings["button"]:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"‚ñ´ {get_size(file.file_size)} ‚ñ∏ {file.file_name}", callback_data=f'files#{file.file_id}'
                ),
            ]
            for file in files
        ]
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}",
                    callback_data=f'{pre}#{file.file_id}',
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'{pre}#{file.file_id}',
                ),
            ]
            for file in files
        ]      
    
    if offset != "":
        key = f"{message.chat.id}-{message.id}"
        BUTTONS[key] = search
        req = message.from_user.id if message.from_user else 0
        btn.append(
            [InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"),InlineKeyboardButton(text=f"1 - {round(int(total_results)/10)}", callback_data="pages"), InlineKeyboardButton(text="…¥·¥áx·¥õ", callback_data=f"next_{req}_{key}_{offset}")]
        )
    else:
        btn.append(
            [InlineKeyboardButton(text="·¥ç·¥è Ä·¥á ·¥ò·¥Ä…¢·¥á …¥·¥è·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á", callback_data="pages")]
        )
    btn.insert(0, 
        [
            InlineKeyboardButton(f'…™…¥Íú∞·¥è', 'movieinfo'),
            InlineKeyboardButton(f'·¥ç·¥è·¥†…™·¥á', 'movss'),
            InlineKeyboardButton(f'Íú±·¥á Ä…™·¥áÍú±', 'moviis')
        ]
    )
    imdb = await get_poster(search, file=(files[0]).file_name) if settings["imdb"] else None
    TEMPLATE = settings['template']
    if imdb:
        cap = TEMPLATE.format(
            query=search,
            title=imdb['title'],
            votes=imdb['votes'],
            aka=imdb["aka"],
            seasons=imdb["seasons"],
            box_office=imdb['box_office'],
            localized_title=imdb['localized_title'],
            kind=imdb['kind'],
            imdb_id=imdb["imdb_id"],
            cast=imdb["cast"],
            runtime=imdb["runtime"],
            countries=imdb["countries"],
            certificates=imdb["certificates"],
            languages=imdb["languages"],
            director=imdb["director"],
            writer=imdb["writer"],
            producer=imdb["producer"],
            composer=imdb["composer"],
            cinematographer=imdb["cinematographer"],
            music_team=imdb["music_team"],
            distributors=imdb["distributors"],
            release_date=imdb['release_date'],
            year=imdb['year'],
            genres=imdb['genres'],
            poster=imdb['poster'],
            plot=imdb['plot'],
            rating=imdb['rating'],
            url=imdb['url'],
            **locals()
        )
    else:
        cap = f"<b>üé™ ·¥õ…™·¥õ…™ ü·¥á {search}\n\n‚îè ü§¥ ·¥Äs·¥ã·¥á·¥Ö  ô è : {message.from_user.mention}\n‚î£ ‚ö° ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è : [·¥ä·¥è ú…¥ è](https://t.me/MHMOVIEBOT)\n‚îó üçÅ ·¥Ñ ú·¥Ä…¥…¥·¥á ü : [·¥ç·¥è·¥†…™·¥á ú·¥ú ô](https://t.me/moviehubottupdates)\n\n·¥ÄÍú∞·¥õ·¥á Ä 30 ·¥ç…™…¥·¥ú·¥õ·¥áÍú± ·¥õ ú…™Íú± ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥°…™ ü ü  ô·¥á ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö\n\n<i>‚òÖ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è  [·¥ç·¥è·¥†…™·¥á ú·¥ú ô](https://t.me/moviehub_support)</i></b>"
    if imdb and imdb.get('poster'):
        try:
            await message.reply_photo(photo=imdb.get('poster'), caption=cap[:1024],
                                      reply_markup=InlineKeyboardMarkup(btn))
        except (MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty):
            pic = imdb.get('poster')
            poster = pic.replace('.jpg', "._V1_UX360.jpg")
            await message.reply_photo(photo=poster, caption=cap[:1024], reply_markup=InlineKeyboardMarkup(btn))
        except Exception as e:
            logger.exception(e)
            await message.reply_photo(photo='https://graph.org/file/7c5f19c190619ed11a1fe.jpg',caption=cap, reply_markup=InlineKeyboardMarkup(btn))
    else:
        await message.reply_photo(photo='https://graph.org/file/7c5f19c190619ed11a1fe.jpg', caption=cap, reply_markup=InlineKeyboardMarkup(btn))
    if spoll:
        await msg.message.delete()

async def advantage_spell_chok(msg):
    query = re.sub(
        r"\b(pl(i|e)*?(s|z+|ease|se|ese|(e+)s(e)?)|((send|snd|giv(e)?|gib)(\sme)?)|movie(s)?|new|latest|br((o|u)h?)*|^h(e|a)?(l)*(o)*|mal(ayalam)?|t(h)?amil|file|that|find|und(o)*|kit(t(i|y)?)?o(w)?|thar(u)?(o)*w?|kittum(o)*|aya(k)*(um(o)*)?|full\smovie|any(one)|with\ssubtitle(s)?)",
        "", msg.text, flags=re.IGNORECASE)  # plis contribute some common words
    query = query.strip() + " movie"
    g_s = await search_gagala(query)
    g_s += await search_gagala(msg.text)
    gs_parsed = []
    if not g_s:
        btn = [[
            InlineKeyboardButton('üîç …¢·¥è·¥è…¢ ü·¥á üîé', url=f'https://google.com/search?q='),
            InlineKeyboardButton(' üîç  è·¥Ä…¥·¥Ö·¥áx üîé', url=f'https://yandex.com/search?text=')
        ],[
            InlineKeyboardButton("üáÆüá≥ ·¥õ Ä·¥Ä…¥s ü·¥Ä·¥õ·¥á ·¥õ·¥è ·¥ç·¥Ä ü·¥Ä è·¥Ä ü·¥Ä·¥ç üáÆüá≥", callback_data="malspell")
        ]]        
        k=await msg.reply_photo(photo="https://telegra.ph/file/4bb1968bd091453b0070c.jpg", caption=script.SPELL_CHECK_ENG, reply_markup=InlineKeyboardMarkup(btn))    
        await asyncio.sleep(26)
        await k.delete()
        await msg.delete()
        return
    regex = re.compile(r".*(imdb|wikipedia).*", re.IGNORECASE)  # look for imdb / wiki results
    gs = list(filter(regex.match, g_s))
    gs_parsed = [re.sub(
        r'\b(\-([a-zA-Z-\s])\-\simdb|(\-\s)?imdb|(\-\s)?wikipedia|\(|\)|\-|reviews|full|all|episode(s)?|film|movie|series)',
        '', i, flags=re.IGNORECASE) for i in gs]
    if not gs_parsed:
        reg = re.compile(r"watch(\s[a-zA-Z0-9_\s\-\(\)]*)*\|.*",
                         re.IGNORECASE)  # match something like Watch Niram | Amazon Prime
        for mv in g_s:
            match = reg.match(mv)
            if match:
                gs_parsed.append(match.group(1))
    user = msg.from_user.id if msg.from_user else 0
    movielist = []
    gs_parsed = list(dict.fromkeys(gs_parsed))  # removing duplicates https://stackoverflow.com/a/7961425
    if len(gs_parsed) > 3:
        gs_parsed = gs_parsed[:3]
    if gs_parsed:
        for mov in gs_parsed:
            imdb_s = await get_poster(mov.strip(), bulk=True)  # searching each keyword in imdb
            if imdb_s:
                movielist += [movie.get('title') for movie in imdb_s]
    movielist += [(re.sub(r'(\-|\(|\)|_)', '', i, flags=re.IGNORECASE)).strip() for i in gs_parsed]
    movielist = list(dict.fromkeys(movielist))  # removing duplicates
    if not movielist:
        btn = [[
            InlineKeyboardButton('üîç …¢·¥è·¥è…¢ ü·¥á üîé', url=f'https://google.com/search?q='),
            InlineKeyboardButton(' üîç  è·¥Ä…¥·¥Ö·¥áx üîé', url=f'https://yandex.com/search?text=')
        ],[
            InlineKeyboardButton("üáÆüá≥ ·¥õ Ä·¥Ä…¥s ü·¥Ä·¥õ·¥á ·¥õ·¥è ·¥ç·¥Ä ü·¥Ä è·¥Ä ü·¥Ä·¥ç üáÆüá≥", callback_data="malspell")
        ]]           
        k=await msg.reply_photo(photo="https://telegra.ph/file/4bb1968bd091453b0070c.jpg", caption=script.SPELL_CHECK_ENG, reply_markup=InlineKeyboardMarkup(btn))    
        await asyncio.sleep(26)
        await k.delete()
        await msg.delete()
        return
    SPELL_CHECK[msg.id] = movielist
    btn = [[
        InlineKeyboardButton('üîç …¢·¥è·¥è…¢ ü·¥á üîé', url=f'https://google.com/search?q='),
        InlineKeyboardButton(' üîç  è·¥Ä…¥·¥Ö·¥áx üîé', url=f'https://yandex.com/search?text=')
    ],[
        InlineKeyboardButton("üáÆüá≥ ·¥õ Ä·¥Ä…¥s ü·¥Ä·¥õ·¥á ·¥õ·¥è ·¥ç·¥Ä ü·¥Ä è·¥Ä ü·¥Ä·¥ç üáÆüá≥", callback_data="malspell")
    ]]
    k=await msg.reply_photo(photo="https://telegra.ph/file/4bb1968bd091453b0070c.jpg", caption=script.SPELL_CHECK_ENG, reply_markup=InlineKeyboardMarkup(btn))    
    await asyncio.sleep(26)
    await k.delete()
    await msg.delete()
    return
async def manual_filters(client, message, text=False):
    group_id = message.chat.id
    name = text or message.text
    reply_id = message.reply_to_message.id if message.reply_to_message else message.id
    keywords = await get_filters(group_id)
    for keyword in reversed(sorted(keywords, key=len)):
        pattern = r"( |^|[^\w])" + re.escape(keyword) + r"( |$|[^\w])"
        if re.search(pattern, name, flags=re.IGNORECASE):
            reply_text, btn, alert, fileid = await find_filter(group_id, keyword)

            if reply_text:
                reply_text = reply_text.replace("\\n", "\n").replace("\\t", "\t")

            if btn is not None:
                try:
                    if fileid == "None":
                        if btn == "[]":
                            await client.send_message(group_id, reply_text, disable_web_page_preview=True)
                        else:
                            button = eval(btn)
                            await client.send_message(
                                group_id,
                                reply_text,
                                disable_web_page_preview=True,
                                reply_markup=InlineKeyboardMarkup(button),
                                reply_to_message_id=reply_id
                            )
                    elif btn == "[]":
                        await client.send_cached_media(
                            group_id,
                            fileid,
                            caption=reply_text or "",
                            reply_to_message_id=reply_id
                        )
                    else:
                        button = eval(btn)
                        await message.reply_cached_media(
                            fileid,
                            caption=reply_text or "",
                            reply_markup=InlineKeyboardMarkup(button),
                            reply_to_message_id=reply_id
                        )
                except Exception as e:
                    logger.exception(e)
                break
    else:
        return False
